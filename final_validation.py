#!/usr/bin/env python3
"""
Validaci√≥n End-to-End Final del Sistema de Trading
"""

import json
import time
import requests
from datetime import datetime

def test_full_trading_workflow():
    """Test completo del flujo de trading"""
    
    print("üöÄ VALIDACI√ìN END-TO-END FINAL")
    print("="*50)
    
    results = {}
    api_base = "http://localhost:8000"
    
    # 1. Verificar API status
    print("\n1Ô∏è‚É£ Verificando API status...")
    try:
        response = requests.get(f"{api_base}/api/status", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API operativa")
            results['api_status'] = True
        else:
            print("‚ùå API no responde")
            results['api_status'] = False
    except:
        print("‚ùå API no disponible")
        results['api_status'] = False
        return results
    
    # 2. Verificar s√≠mbolos y datos de mercado
    print("\n2Ô∏è‚É£ Verificando datos de mercado...")
    symbol = "SOLUSDT"
    try:
        response = requests.get(f"{api_base}/api/symbol/{symbol}/data", timeout=10)
        if response.status_code == 200:
            data = response.json()
            price = data.get('current_price', 0)
            print(f"‚úÖ Datos de {symbol}: ${price:.2f}")
            results['market_data'] = True
        else:
            print("‚ùå Error obteniendo datos de mercado")
            results['market_data'] = False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        results['market_data'] = False
    
    # 3. Verificar se√±ales
    print("\n3Ô∏è‚É£ Verificando se√±ales...")
    try:
        response = requests.get(f"{api_base}/api/signals/{symbol}", timeout=10)
        if response.status_code == 200:
            signals = response.json()
            if signals.get('signal'):
                action = signals['signal']['action']
                confidence = signals['signal']['confidence']
                print(f"‚úÖ Se√±al disponible: {action} (confianza: {confidence:.2f})")
                results['signals'] = True
            else:
                print("‚ÑπÔ∏è No hay se√±ales activas (normal)")
                results['signals'] = True
        else:
            print("‚ùå Error obteniendo se√±ales")
            results['signals'] = False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        results['signals'] = False
    
    # 4. Verificar backtest
    print("\n4Ô∏è‚É£ Ejecutando backtest r√°pido...")
    try:
        response = requests.post(
            f"{api_base}/api/backtest/{symbol}",
            json={"period_days": 3},
            timeout=15
        )
        if response.status_code == 200:
            backtest_data = response.json()
            signals_count = len(backtest_data.get('signals', []))
            print(f"‚úÖ Backtest ejecutado: {signals_count} se√±ales hist√≥ricas")
            results['backtest'] = True
        else:
            print("‚ùå Error en backtest")
            results['backtest'] = False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        results['backtest'] = False
    
    # 5. Verificar estad√≠sticas de mercado
    print("\n5Ô∏è‚É£ Verificando estad√≠sticas de mercado...")
    try:
        response = requests.get(f"{api_base}/api/market/{symbol}/stats", timeout=10)
        if response.status_code == 200:
            stats = response.json()
            rsi = stats.get('rsi', 0)
            trend = stats.get('trend', 'unknown')
            print(f"‚úÖ Stats: RSI {rsi:.1f}, Tendencia: {trend}")
            results['market_stats'] = True
        else:
            print("‚ùå Error obteniendo estad√≠sticas")
            results['market_stats'] = False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        results['market_stats'] = False
    
    # 6. Verificar configuraci√≥n
    print("\n6Ô∏è‚É£ Verificando configuraci√≥n...")
    try:
        response = requests.get(f"{api_base}/api/config", timeout=5)
        if response.status_code == 200:
            config = response.json()
            symbols = config.get('symbols', [])
            print(f"‚úÖ Configuraci√≥n: {len(symbols)} s√≠mbolos activos")
            results['config'] = True
        else:
            print("‚ùå Error obteniendo configuraci√≥n")
            results['config'] = False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        results['config'] = False
    
    # 7. Verificar performance del sistema
    print("\n7Ô∏è‚É£ Verificando performance...")
    try:
        response = requests.get(f"{api_base}/api/performance", timeout=5)
        if response.status_code == 200:
            perf = response.json()
            print(f"‚úÖ Performance disponible")
            results['performance'] = True
        else:
            print("‚ùå Error obteniendo performance")
            results['performance'] = False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        results['performance'] = False
    
    # 8. Test de latencia
    print("\n8Ô∏è‚É£ Midiendo latencia...")
    latencies = []
    for i in range(3):
        start = time.time()
        try:
            response = requests.get(f"{api_base}/api/status", timeout=5)
            if response.status_code == 200:
                latency = (time.time() - start) * 1000
                latencies.append(latency)
        except:
            pass
    
    if latencies:
        avg_latency = sum(latencies) / len(latencies)
        print(f"‚úÖ Latencia promedio: {avg_latency:.1f}ms")
        results['latency'] = avg_latency
        results['latency_ok'] = avg_latency < 500  # Menos de 500ms
    else:
        print("‚ùå No se pudo medir latencia")
        results['latency_ok'] = False
    
    return results

def generate_final_report(results):
    """Genera reporte final del sistema"""
    
    print("\n" + "="*60)
    print("üìä REPORTE FINAL DEL SISTEMA")
    print("="*60)
    
    # Contar tests pasados
    test_keys = [
        'api_status', 'market_data', 'signals', 'backtest', 
        'market_stats', 'config', 'performance', 'latency_ok'
    ]
    
    passed = sum(1 for key in test_keys if results.get(key, False))
    total = len(test_keys)
    success_rate = (passed / total) * 100 if total > 0 else 0
    
    print(f"\n‚úÖ Tests Pasados: {passed}/{total}")
    print(f"üìà Tasa de √âxito: {success_rate:.1f}%")
    
    if 'latency' in results:
        print(f"‚ö° Latencia Promedio: {results['latency']:.1f}ms")
    
    # Estado del sistema
    if success_rate >= 90:
        status = "üü¢ SISTEMA COMPLETAMENTE OPERATIVO"
        recommendation = "Sistema listo para uso en producci√≥n"
    elif success_rate >= 75:
        status = "üü° SISTEMA MAYORMENTE FUNCIONAL"
        recommendation = "Algunos componentes necesitan atenci√≥n"
    else:
        status = "üî¥ SISTEMA REQUIERE CORRECCIONES"
        recommendation = "Revisar componentes fallidos antes de usar"
    
    print(f"\n{status}")
    print(f"üí° Recomendaci√≥n: {recommendation}")
    
    # Detalles por componente
    print(f"\nüìã Estado por Componente:")
    components = {
        'api_status': 'API Principal',
        'market_data': 'Datos de Mercado',
        'signals': 'Sistema de Se√±ales',
        'backtest': 'Sistema de Backtest',
        'market_stats': 'Estad√≠sticas de Mercado',
        'config': 'Configuraci√≥n',
        'performance': 'M√©tricas de Performance',
        'latency_ok': 'Latencia Aceptable'
    }
    
    for key, name in components.items():
        status_emoji = "‚úÖ" if results.get(key, False) else "‚ùå"
        print(f"  {status_emoji} {name}")
    
    # Timestamp
    print(f"\nüïê Validaci√≥n completada: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Guardar reporte
    report = {
        'timestamp': datetime.now().isoformat(),
        'success_rate': success_rate,
        'tests_passed': passed,
        'tests_total': total,
        'results': results,
        'status': status,
        'recommendation': recommendation
    }
    
    with open('final_validation_report.json', 'w') as f:
        json.dump(report, f, indent=2, default=str)
    
    print(f"\nüíæ Reporte guardado en: final_validation_report.json")
    
    return report

if __name__ == "__main__":
    # Ejecutar validaci√≥n completa
    results = test_full_trading_workflow()
    
    # Generar reporte final
    report = generate_final_report(results)
    
    print(f"\nüéØ VALIDACI√ìN END-TO-END COMPLETADA")
    print(f"Resultado: {report['success_rate']:.1f}% de √©xito")
    
    # Exit code
    exit_code = 0 if report['success_rate'] >= 80 else 1
    exit(exit_code)