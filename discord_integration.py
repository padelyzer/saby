#!/usr/bin/env python3
"""
Integraci√≥n con Discord para recibir se√±ales en tiempo real
"""

import requests
import json
from datetime import datetime

class DiscordNotifier:
    """
    Env√≠a notificaciones a Discord cuando hay se√±ales
    """
    
    def __init__(self, webhook_url):
        self.webhook_url = webhook_url
    
    def send_signal_alert(self, trade_data):
        """Env√≠a alerta de nueva se√±al"""
        
        # Determinar color del embed
        color = 0x00ff00 if trade_data['type'] == 'LONG' else 0xff0000  # Verde/Rojo
        
        embed = {
            "title": f"üéØ NUEVA SE√ëAL: {trade_data['symbol']}",
            "color": color,
            "fields": [
                {
                    "name": "üìä Tipo",
                    "value": f"**{trade_data['type']}**",
                    "inline": True
                },
                {
                    "name": "üí∞ Entry Price",
                    "value": f"${trade_data['entry_price']:,.2f}",
                    "inline": True
                },
                {
                    "name": "üéØ Confianza",
                    "value": f"{trade_data['confidence']:.1%}",
                    "inline": True
                },
                {
                    "name": "üõ°Ô∏è Stop Loss",
                    "value": f"${trade_data['stop_loss']:,.2f}",
                    "inline": True
                },
                {
                    "name": "üéä Take Profit",
                    "value": f"${trade_data['take_profit']:,.2f}",
                    "inline": True
                },
                {
                    "name": "üìà Risk/Reward",
                    "value": f"1:{((trade_data['take_profit'] - trade_data['entry_price']) / (trade_data['entry_price'] - trade_data['stop_loss'])):.1f}",
                    "inline": True
                },
                {
                    "name": "üîç Se√±ales",
                    "value": ", ".join(trade_data['signals'][:3]),
                    "inline": False
                }
            ],
            "timestamp": datetime.now().isoformat(),
            "footer": {
                "text": "Trading Bot V2.5"
            }
        }
        
        payload = {
            "embeds": [embed]
        }
        
        try:
            response = requests.post(self.webhook_url, json=payload)
            return response.status_code == 204
        except Exception as e:
            print(f"Error enviando a Discord: {e}")
            return False
    
    def send_trade_close(self, trade_data):
        """Env√≠a alerta cuando se cierra un trade"""
        
        # Color basado en P&L
        color = 0x00ff00 if trade_data['pnl'] > 0 else 0xff0000
        result_emoji = "‚úÖ" if trade_data['pnl'] > 0 else "‚ùå"
        
        embed = {
            "title": f"{result_emoji} TRADE CERRADO: {trade_data['symbol']}",
            "color": color,
            "fields": [
                {
                    "name": "üìä Resultado",
                    "value": f"**{trade_data['exit_reason']}**",
                    "inline": True
                },
                {
                    "name": "üí∞ P&L",
                    "value": f"${trade_data['pnl']:,.2f}",
                    "inline": True
                },
                {
                    "name": "üìà P&L %",
                    "value": f"{trade_data['pnl_pct']:+.2f}%",
                    "inline": True
                },
                {
                    "name": "üïê Duraci√≥n",
                    "value": f"{(trade_data['exit_time'] - trade_data['entry_time']).total_seconds() / 3600:.1f}h",
                    "inline": True
                },
                {
                    "name": "üìç Entry ‚Üí Exit",
                    "value": f"${trade_data['entry_price']:,.2f} ‚Üí ${trade_data['exit_price']:,.2f}",
                    "inline": False
                }
            ],
            "timestamp": datetime.now().isoformat(),
            "footer": {
                "text": "Trading Bot V2.5"
            }
        }
        
        payload = {
            "embeds": [embed]
        }
        
        try:
            response = requests.post(self.webhook_url, json=payload)
            return response.status_code == 204
        except Exception as e:
            print(f"Error enviando a Discord: {e}")
            return False
    
    def send_daily_summary(self, stats):
        """Env√≠a resumen diario"""
        
        color = 0x00ff00 if stats['total_pnl'] > 0 else 0xff0000
        
        embed = {
            "title": "üìä RESUMEN DIARIO",
            "color": color,
            "fields": [
                {
                    "name": "üí∞ P&L Total",
                    "value": f"${stats['total_pnl']:,.2f}",
                    "inline": True
                },
                {
                    "name": "üìà ROI",
                    "value": f"{stats['roi']:+.2f}%",
                    "inline": True
                },
                {
                    "name": "üéØ Win Rate",
                    "value": f"{stats['win_rate']:.1f}%",
                    "inline": True
                },
                {
                    "name": "üìä Total Trades",
                    "value": f"{stats['total_trades']}",
                    "inline": True
                },
                {
                    "name": "‚ö° Profit Factor",
                    "value": f"{stats['profit_factor']:.2f}",
                    "inline": True
                },
                {
                    "name": "üíº Capital Actual",
                    "value": f"${stats['current_capital']:,.2f}",
                    "inline": True
                }
            ],
            "timestamp": datetime.now().isoformat(),
            "footer": {
                "text": "Trading Bot V2.5 - Reporte Diario"
            }
        }
        
        payload = {
            "embeds": [embed]
        }
        
        try:
            response = requests.post(self.webhook_url, json=payload)
            return response.status_code == 204
        except Exception as e:
            print(f"Error enviando a Discord: {e}")
            return False

# Ejemplo de uso:
"""
# 1. Crear webhook en Discord:
#    Servidor > Configuraci√≥n > Integraciones > Webhooks > Nuevo Webhook
#    Copiar URL del webhook

# 2. En el trading bot:
discord = DiscordNotifier("https://discord.com/api/webhooks/123456...")

# 3. Cuando hay nueva se√±al:
discord.send_signal_alert(trade_data)

# 4. Cuando se cierra trade:
discord.send_trade_close(closed_trade)
"""