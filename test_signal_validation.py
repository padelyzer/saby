#!/usr/bin/env python3
"""
Test de validaci√≥n de coherencia de se√±ales
"""

from advanced_signals import AdvancedSignalDetector
import yfinance as yf

print("üîç Probando validaci√≥n de se√±ales...")
print("="*50)

detector = AdvancedSignalDetector()

# Probar con BTC
print("\nAnalizando BTC-USD...")
btc = yf.Ticker('BTC-USD')
df = btc.history(period='3mo', interval='1h')

signal = detector.generate_advanced_signal('BTC-USD', df)

if signal:
    print(f"\n‚úÖ Se√±al encontrada: {signal['type']}")
    print(f"Precio entrada: ${signal['entry_price']:,.2f}")
    print(f"Stop Loss: ${signal['stop_loss']:,.2f}")
    print(f"Target 1: ${signal['primary_target']['price']:,.2f}")
    print(f"R:R Ratio: {signal['risk_reward_ratio']}:1")
    
    # Validar coherencia
    print(f"\nüîç Validaci√≥n de coherencia:")
    
    if signal['type'] == 'LONG':
        tp_valid = signal['primary_target']['price'] > signal['entry_price']
        sl_valid = signal['stop_loss'] < signal['entry_price']
        
        print(f"‚Ä¢ Target arriba del precio: {'‚úÖ' if tp_valid else '‚ùå'}")
        print(f"‚Ä¢ Stop debajo del precio: {'‚úÖ' if sl_valid else '‚ùå'}")
        
        if tp_valid and sl_valid:
            print("‚úÖ SE√ëAL LONG COHERENTE")
        else:
            print("‚ùå ERROR: Se√±al LONG incoherente")
            
    else:  # SHORT
        tp_valid = signal['primary_target']['price'] < signal['entry_price']
        sl_valid = signal['stop_loss'] > signal['entry_price']
        
        print(f"‚Ä¢ Target debajo del precio: {'‚úÖ' if tp_valid else '‚ùå'}")
        print(f"‚Ä¢ Stop arriba del precio: {'‚úÖ' if sl_valid else '‚ùå'}")
        
        if tp_valid and sl_valid:
            print("‚úÖ SE√ëAL SHORT COHERENTE")
        else:
            print("‚ùå ERROR: Se√±al SHORT incoherente")
    
    # Mostrar razones
    print(f"\nRazones ({len(signal['entry_reasons'])}):")
    for reason in signal['entry_reasons']:
        print(f"‚Ä¢ {reason}")
        
else:
    print("‚ùå No se gener√≥ se√±al (filtrada por validaci√≥n)")

# Probar con m√°s criptos
print("\n" + "="*50)
print("Probando otras criptomonedas...")

tickers = ['ETH-USD', 'SOL-USD', 'BNB-USD']
for ticker in tickers:
    try:
        stock = yf.Ticker(ticker)
        df = stock.history(period='3mo', interval='1h')
        signal = detector.generate_advanced_signal(ticker, df)
        
        if signal:
            # Validar
            if signal['type'] == 'LONG':
                valid = signal['primary_target']['price'] > signal['entry_price'] and \
                       signal['stop_loss'] < signal['entry_price']
            else:
                valid = signal['primary_target']['price'] < signal['entry_price'] and \
                       signal['stop_loss'] > signal['entry_price']
            
            status = "‚úÖ Coherente" if valid else "‚ùå Incoherente"
            print(f"{ticker}: {signal['type']} - {status}")
        else:
            print(f"{ticker}: Sin se√±al")
    except Exception as e:
        print(f"{ticker}: Error - {e}")

print("\n‚úÖ Test completado")