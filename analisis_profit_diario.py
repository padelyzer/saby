#!/usr/bin/env python3
"""
An√°lisis de Factibilidad: 3% Profit Diario
Evaluaci√≥n realista del sistema para targets diarios
"""

import numpy as np
import pandas as pd
from datetime import datetime, timedelta

class AnalisisProfitDiario:
    """An√°lisis de factibilidad para profits diarios"""
    
    def __init__(self):
        # Datos del mejor sistema (V2 Emp√≠rico)
        self.sistema_stats = {
            'win_rate': 0.565,        # 56.5%
            'profit_factor': 1.37,
            'avg_win': 1.21,          # % promedio por trade ganador
            'avg_loss': -0.94,        # % promedio por trade perdedor
            'avg_trades_per_month': 23, # Basado en backtesting 30 d√≠as
            'max_leverage': 5,        # Leverage m√°ximo usado
        }
        
        # Target diario
        self.target_daily = 0.03  # 3% diario
        self.target_monthly = 0.03 * 22  # 3% x 22 d√≠as trading = 66% mensual
        
    def calcular_trades_necesarios_diarios(self):
        """Calcula cu√°ntos trades necesitamos diariamente para 3%"""
        
        print('üìä AN√ÅLISIS: 3% PROFIT DIARIO')
        print('='*60)
        
        # Profit esperado por trade
        expected_profit_per_trade = (
            self.sistema_stats['win_rate'] * self.sistema_stats['avg_win'] + 
            (1 - self.sistema_stats['win_rate']) * self.sistema_stats['avg_loss']
        )
        
        print(f'üí∞ M√âTRICAS DEL SISTEMA ACTUAL:')
        print(f'‚Ä¢ Win Rate: {self.sistema_stats["win_rate"]*100:.1f}%')
        print(f'‚Ä¢ Profit Factor: {self.sistema_stats["profit_factor"]:.2f}')
        print(f'‚Ä¢ Avg Win: +{self.sistema_stats["avg_win"]:.2f}%')
        print(f'‚Ä¢ Avg Loss: {self.sistema_stats["avg_loss"]:.2f}%')
        print(f'‚Ä¢ Expected Profit/Trade: {expected_profit_per_trade:.3f}%')
        
        # Calcular trades necesarios
        trades_necesarios = self.target_daily / (expected_profit_per_trade / 100)
        
        print(f'\nüéØ PARA ALCANZAR 3% DIARIO:')
        print(f'‚Ä¢ Trades necesarios por d√≠a: {trades_necesarios:.1f}')
        
        # Trades actuales vs necesarios
        trades_actuales_diarios = self.sistema_stats['avg_trades_per_month'] / 22
        print(f'‚Ä¢ Trades actuales por d√≠a: {trades_actuales_diarios:.1f}')
        
        factor_multiplicacion = trades_necesarios / trades_actuales_diarios
        print(f'‚Ä¢ Factor de multiplicaci√≥n necesario: {factor_multiplicacion:.1f}x')
        
        return trades_necesarios, factor_multiplicacion
    
    def analizar_escenarios_leverage(self):
        """Analiza diferentes escenarios con leverage"""
        
        print(f'\n‚ö° AN√ÅLISIS CON DIFERENTES LEVERAGES:')
        print('-'*50)
        
        leverages = [1, 2, 3, 5, 8, 10]
        
        for leverage in leverages:
            # Profit amplificado por leverage
            amplified_avg_win = self.sistema_stats['avg_win'] * leverage
            amplified_avg_loss = self.sistema_stats['avg_loss'] * leverage
            
            expected_profit_leveraged = (
                self.sistema_stats['win_rate'] * amplified_avg_win + 
                (1 - self.sistema_stats['win_rate']) * amplified_avg_loss
            )
            
            trades_necesarios = self.target_daily / (expected_profit_leveraged / 100)
            trades_actuales = self.sistema_stats['avg_trades_per_month'] / 22
            
            print(f'{leverage}x Leverage:')
            print(f'  ‚Ä¢ Expected Profit/Trade: {expected_profit_leveraged:.2f}%')
            print(f'  ‚Ä¢ Trades necesarios/d√≠a: {trades_necesarios:.1f}')
            
            if trades_necesarios <= trades_actuales * 2:  # Factible si necesitamos ‚â§ 2x trades actuales
                print(f'  ‚Ä¢ ‚úÖ FACTIBLE (solo {trades_necesarios/trades_actuales:.1f}x m√°s trades)')
            elif trades_necesarios <= trades_actuales * 5:
                print(f'  ‚Ä¢ ‚ö†Ô∏è DESAFIANTE ({trades_necesarios/trades_actuales:.1f}x m√°s trades)')
            else:
                print(f'  ‚Ä¢ ‚ùå NO FACTIBLE ({trades_necesarios/trades_actuales:.1f}x m√°s trades)')
            print()
    
    def calcular_probabilidad_exito(self):
        """Calcula probabilidad de alcanzar 3% diario consistentemente"""
        
        print(f'üé≤ AN√ÅLISIS DE PROBABILIDAD:')
        print('-'*50)
        
        # Simulaci√≥n Monte Carlo para 3% diario
        resultados_simulacion = []
        
        # Simular 1000 d√≠as de trading
        for dia in range(1000):
            daily_trades = np.random.poisson(self.sistema_stats['avg_trades_per_month'] / 22)
            daily_profit = 0
            
            for trade in range(daily_trades):
                if np.random.random() < self.sistema_stats['win_rate']:
                    # Trade ganador
                    profit = np.random.normal(self.sistema_stats['avg_win'], 0.5)  # Variabilidad
                else:
                    # Trade perdedor
                    profit = np.random.normal(self.sistema_stats['avg_loss'], 0.3)
                
                daily_profit += profit
            
            resultados_simulacion.append(daily_profit)
        
        resultados_simulacion = np.array(resultados_simulacion)
        
        # An√°lisis de resultados
        dias_exitosos = np.sum(resultados_simulacion >= 3.0)
        probabilidad_3pct = dias_exitosos / 1000 * 100
        
        print(f'‚Ä¢ D√≠as que alcanzan 3%+: {dias_exitosos}/1000')
        print(f'‚Ä¢ Probabilidad diaria de 3%+: {probabilidad_3pct:.1f}%')
        print(f'‚Ä¢ Profit promedio diario: {np.mean(resultados_simulacion):.2f}%')
        print(f'‚Ä¢ Mejor d√≠a simulado: {np.max(resultados_simulacion):.2f}%')
        print(f'‚Ä¢ Peor d√≠a simulado: {np.min(resultados_simulacion):.2f}%')
        
        # An√°lisis de rachas
        dias_consecutivos_3pct = self._analizar_rachas_consecutivas(resultados_simulacion, 3.0)
        print(f'‚Ä¢ Racha m√°s larga de 3%+: {dias_consecutivos_3pct} d√≠as')
        
        return probabilidad_3pct
    
    def _analizar_rachas_consecutivas(self, resultados, threshold):
        """Analiza rachas consecutivas por encima del threshold"""
        
        racha_actual = 0
        racha_maxima = 0
        
        for resultado in resultados:
            if resultado >= threshold:
                racha_actual += 1
                racha_maxima = max(racha_maxima, racha_actual)
            else:
                racha_actual = 0
        
        return racha_maxima
    
    def analizar_riesgo_vs_recompensa(self):
        """Analiza el riesgo necesario para 3% diario"""
        
        print(f'\n‚ö†Ô∏è AN√ÅLISIS DE RIESGO:')
        print('-'*50)
        
        # Para 3% diario necesitamos asumir m√°s riesgo
        position_sizes = [0.02, 0.05, 0.10, 0.15, 0.20]  # % del capital por trade
        
        for pos_size in position_sizes:
            max_loss_per_trade = pos_size * self.sistema_stats['avg_loss'] / 100
            max_loss_daily = max_loss_per_trade * 5  # Asumiendo 5 trades perdedores consecutivos
            
            max_gain_per_trade = pos_size * self.sistema_stats['avg_win'] / 100
            
            print(f'Position Size {pos_size*100:.0f}%:')
            print(f'  ‚Ä¢ Max ganancia/trade: {max_gain_per_trade*100:.2f}%')
            print(f'  ‚Ä¢ Max p√©rdida/trade: {max_loss_per_trade*100:.2f}%')
            print(f'  ‚Ä¢ Riesgo diario (5 losses): {max_loss_daily*100:.2f}%')
            
            if max_loss_daily <= -0.15:  # M√°s de 15% p√©rdida diaria
                print(f'  ‚Ä¢ ‚ùå RIESGO EXCESIVO')
            elif max_loss_daily <= -0.10:
                print(f'  ‚Ä¢ ‚ö†Ô∏è RIESGO ALTO')
            elif max_loss_daily <= -0.05:
                print(f'  ‚Ä¢ üìä RIESGO MODERADO')
            else:
                print(f'  ‚Ä¢ ‚úÖ RIESGO ACEPTABLE')
            print()
    
    def generar_estrategias_3pct(self):
        """Genera estrategias para alcanzar 3% diario"""
        
        print(f'üéØ ESTRATEGIAS PARA 3% DIARIO:')
        print('='*60)
        
        print(f'üìã ESTRATEGIA 1: ALTA FRECUENCIA')
        print(f'‚Ä¢ Objetivo: 10-15 trades/d√≠a (vs 1 actual)')
        print(f'‚Ä¢ Leverage: 2-3x')
        print(f'‚Ä¢ Position size: 3-5% por trade')
        print(f'‚Ä¢ Profit target: 0.3-0.5% por trade')
        print(f'‚Ä¢ Factibilidad: ‚ö†Ô∏è DESAFIANTE (requiere muchas se√±ales)')
        
        print(f'\nüìã ESTRATEGIA 2: LEVERAGE MODERADO')
        print(f'‚Ä¢ Objetivo: 3-5 trades/d√≠a')
        print(f'‚Ä¢ Leverage: 5-8x')
        print(f'‚Ä¢ Position size: 2% por trade')
        print(f'‚Ä¢ Profit target: 1-2% por trade')
        print(f'‚Ä¢ Factibilidad: üìä POSIBLE (con m√°s riesgo)')
        
        print(f'\nüìã ESTRATEGIA 3: LEVERAGE ALTO')
        print(f'‚Ä¢ Objetivo: 1-2 trades/d√≠a')
        print(f'‚Ä¢ Leverage: 10-15x')
        print(f'‚Ä¢ Position size: 1-2% por trade')
        print(f'‚Ä¢ Profit target: 3-5% por trade')
        print(f'‚Ä¢ Factibilidad: ‚ùå RIESGO EXTREMO')
        
        print(f'\nüí° RECOMENDACI√ìN:')
        print(f'Estrategia 2 es el mejor balance riesgo/recompensa')
    
    def calcular_tiempo_para_targets(self):
        """Calcula tiempo para diferentes targets de ganancia"""
        
        print(f'\n‚è∞ TIEMPO PARA DIFERENTES TARGETS:')
        print('-'*50)
        
        profit_mensual_actual = (self.sistema_stats['avg_trades_per_month'] * 
                               (self.sistema_stats['win_rate'] * self.sistema_stats['avg_win'] + 
                                (1 - self.sistema_stats['win_rate']) * self.sistema_stats['avg_loss']))
        
        targets = [10, 25, 50, 100, 200]  # % de ganancia
        
        print(f'Con el sistema actual ({profit_mensual_actual:.1f}% mensual):')
        
        for target in targets:
            meses_necesarios = target / profit_mensual_actual
            
            print(f'‚Ä¢ {target}% ganancia: {meses_necesarios:.1f} meses')
        
        print(f'\nCon 3% diario (66% mensual):')
        for target in targets:
            meses_con_3pct = target / 66
            print(f'‚Ä¢ {target}% ganancia: {meses_con_3pct:.1f} meses')

def main():
    """Funci√≥n principal"""
    
    analyzer = AnalisisProfitDiario()
    
    # Ejecutar todos los an√°lisis
    trades_necesarios, factor = analyzer.calcular_trades_necesarios_diarios()
    analyzer.analizar_escenarios_leverage()
    probabilidad = analyzer.calcular_probabilidad_exito()
    analyzer.analizar_riesgo_vs_recompensa()
    analyzer.generar_estrategias_3pct()
    analyzer.calcular_tiempo_para_targets()
    
    # Conclusi√≥n final
    print(f'\nüéØ CONCLUSI√ìN FINAL: 3% DIARIO')
    print('='*60)
    
    if probabilidad >= 30:
        print(f'‚úÖ FACTIBLE: {probabilidad:.1f}% probabilidad diaria')
        print(f'üìä Recomendaci√≥n: Implementar con gesti√≥n de riesgo estricta')
    elif probabilidad >= 15:
        print(f'‚ö†Ô∏è DESAFIANTE: {probabilidad:.1f}% probabilidad diaria')
        print(f'üìä Recomendaci√≥n: Considerar targets m√°s conservadores')
    else:
        print(f'‚ùå NO RECOMENDABLE: {probabilidad:.1f}% probabilidad diaria')
        print(f'üìä Recomendaci√≥n: Targets m√°s realistas (1-2% diario)')
    
    print(f'\nüí° ALTERNATIVA REALISTA:')
    profit_mensual_conservador = analyzer.sistema_stats['avg_trades_per_month'] * 0.3  # 0.3% por trade promedio
    profit_diario_conservador = profit_mensual_conservador / 22
    
    print(f'‚Ä¢ Target diario conservador: {profit_diario_conservador:.1f}%')
    print(f'‚Ä¢ Target mensual conservador: {profit_mensual_conservador:.1f}%')
    print(f'‚Ä¢ Probabilidad de √©xito: ~70-80%')

if __name__ == "__main__":
    main()