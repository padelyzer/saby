#!/usr/bin/env python3
"""
Script de prueba para el sistema de autenticaci√≥n
"""

from auth_system import auth, require_login
import time


# Funci√≥n de ejemplo protegida
@require_login
def funcion_protegida():
    """Esta funci√≥n requiere autenticaci√≥n"""
    print("‚úÖ Has accedido a una funci√≥n protegida!")
    print(f"   Usuario actual: {auth.get_current_user()}")
    return "Operaci√≥n exitosa"


# Funci√≥n de ejemplo sin protecci√≥n
def funcion_publica():
    """Esta funci√≥n es p√∫blica"""
    print("Esta es una funci√≥n p√∫blica, no requiere autenticaci√≥n")
    return "Informaci√≥n p√∫blica"


def test_auth_system():
    """Prueba el sistema de autenticaci√≥n"""
    print("\nüîß TEST DEL SISTEMA DE AUTENTICACI√ìN")
    print("=" * 50)
    
    # Test 1: Funci√≥n p√∫blica
    print("\n1. Probando funci√≥n p√∫blica:")
    resultado = funcion_publica()
    print(f"   Resultado: {resultado}")
    
    # Test 2: Funci√≥n protegida (deber√≠a pedir login)
    print("\n2. Probando funci√≥n protegida:")
    resultado = funcion_protegida()
    if resultado:
        print(f"   Resultado: {resultado}")
    
    # Test 3: Verificar estado de sesi√≥n
    print("\n3. Verificando estado de sesi√≥n:")
    if auth.is_authenticated():
        print(f"   ‚úÖ Sesi√≥n activa para: {auth.get_current_user()}")
    else:
        print("   ‚ùå No hay sesi√≥n activa")
    
    # Test 4: Segunda llamada a funci√≥n protegida (no deber√≠a pedir login)
    print("\n4. Segunda llamada a funci√≥n protegida:")
    resultado = funcion_protegida()
    
    # Test 5: Logout
    print("\n5. Cerrando sesi√≥n:")
    auth.logout()
    
    # Test 6: Intentar acceder despu√©s del logout
    print("\n6. Intentando acceder despu√©s del logout:")
    resultado = funcion_protegida()
    
    print("\n" + "=" * 50)
    print("‚úÖ Pruebas completadas")


if __name__ == "__main__":
    test_auth_system()